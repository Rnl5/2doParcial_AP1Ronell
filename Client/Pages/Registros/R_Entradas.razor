@page "/registroEntradas"
@page "/registroEntradas/{EntradaId:int}"

@inject NotificationService notificationService
@inject HttpClient httpClient


<EditForm Model="entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card">
            <div class="card-header">
                <h3>Entrada de Productos Empacados</h3>
            </div>

            <div class="card-body">
                <div class="col-3">
                    <label>Id</label>
                    <div class="input-group mb-3">
                        <InputNumber class="form-control" @bind-Value ="EntradaId" aria-describedby="BotonBuscarId"></InputNumber>
                        <ValidationMessage For="@(() => entradas.EntradaId)"></ValidationMessage>
                        <button type="button" @onclick="Buscar" class="btn btn-outline-primary"><i class="oi oi-magnifying-glass"></i></button> 
                    </div>
                </div>
                <div class="col-3">
                    <label>Fecha</label>
                    <div class="input-group mb-3">
                        <InputDate @bind-Value="entradas.Fecha" class="form-control"></InputDate>
                        <ValidationMessage For ="@(() => entradas.Fecha)"></ValidationMessage>
                    </div>
                </div>
                
                <div class="col-8">
                    <label>Concepto</label>
                    <div class="input-group mb-3">
                        <InputText class="form-control" @bind-Value="entradas.Concepto"></InputText>
                        <ValidationMessage For="@(() => entradas.Concepto)"></ValidationMessage>
                    </div>
                </div>
                

                @*Detalle de Utilizados*@
                <fieldset class="border-success border border-1">
                    <h3>Utilizados</h3>
                    <div>
                        <div class="row">
                            <div class="col-3">
                                <label>Producto</label>
                                <div class="input-group mb-3">
                                    <InputSelect class="form-select" @bind-Value="productoSeleccionado">
                                        <option value ="0" disabled selected>Seleccione un producto</option>
                                        @foreach(var producto in L_Productos)
                                        {
                                            @if(producto.Tipo == 0){
                                                <option value ="@producto.ProductoId">@producto.Descripcion</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => entradas.ProductoId)"></ValidationMessage>
                                </div>
                            </div>

                            <div class="col-3">
                                <label>Cantidad</label>
                                <div class="input-group mb-3">
                                    <InputNumber @bind-Value="cantidadUtilizada" class="form-control" placeholder="Cantidad utilizada"></InputNumber>
                                </div>
                            </div>

                            <div class="col">
                                <button type ="button" @onclick="AgregarDetalle" class="btn btn-outline-primary"><i class="oi oi-plus">Agregar</i></button>
                            </div>

                            @if(ValidacionD.Length > 0)
                            {
                                <label class="text-danger">@ValidacionD</label>
                            }
                        </div>

                        <br>
                        <table class="table table-bordered table-light m-1">
                            <thead class="thead">
                                <tr class="table">
                                    <th>Producto Id</th>
                                    <th>Descripci&oacute;n</th>
                                    <th>Cantidad (g)</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach(var detalle in entradas.EntradasDetalle)
                                {
                                    <tr>
                                        <td>@detalle.ProductoId</td>
                                        <td>@(DescripcionProducto(detalle.ProductoId))</td>
                                        <td>@detalle.CantidadUtilizada</td>
                                        <td><button @onclick="@(() => RemoverDetalle(detalle))" class="btn btn-outline-danger" type="button"><i class="oi oi-trash">Eliminar</i></button></td>
                                    </tr>
                                }
                            </tbody>
                            <label>Peso Total: </label>
                                <div class="input-group mb-3">
                                    <span class="form-control">@entradas.PesoTotal gramos</span>
                                </div>
                        </table>
                        <div class="form-row justify-content-sm-between" aria-orientation="vertical">
                            <div class="col-3">
                                <label for="CantidadDetalle" class="col-form-label"><strong>Num. Productos</strong>&nbsp;</label>
                                <input id="CantidadDetalle" @bind-value="@ConteoDetalles" disabled class="form-control" />
                            </div>
                        </div>
                    </div>
                </fieldset>

                @*Detalle de producidos*@
                <fieldset class="border-primary border border-1">
                    <h3>Producido</h3>
                    <div>
                        <div class="row">
                            <div class="col-4">
                                <label>Producto</label>
                                <div class="input-group mb-3">
                                    <InputSelect class="form-select" @bind-Value="entradas.ProductoId">
                                        <option value ="0" disabled selected>Seleccione el mixto que se producir&aacute;</option>
                                        @foreach(var producto in L_Productos)
                                        {
                                            @if(producto.Tipo == 1)
                                            {
                                                <option value ="@producto.ProductoId">@producto.Descripcion</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => entradas.ProductoId)"></ValidationMessage>
                                </div>
                            </div>

                            <div class="col-3">
                                <label>Cantidad</label>
                                <div class="input-group mb-3">
                                    <InputNumber class="form-control" @bind-Value="entradas.CantidadProducida" placeholder="Cantidad producida"></InputNumber>
                                    <ValidationMessage For="@(() => entradas.CantidadProducida)"></ValidationMessage>
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <br>
                <div class="btn-group">
                    <button class="btn btn-outline-primary" @onclick="Nuevo" type="button"><i class="oi oi-file">Nuevo</i></button>
                    <button class="btn btn-outline-success" type ="submit"><i class="oi oi-document">Guardar</i></button>
                    <button class="btn btn-outline-danger" @onclick="Eliminar" type="button"><i class="oi oi-trash">Eliminar</i></button>
                </div>
            </div>
        </div>
    </div>

</EditForm>



@code
{
    [Parameter]
    public int EntradaId {get; set;}
    public Entradas entradas {get; set;} = new Entradas();

    public int productoSeleccionado {get; set;}

    public int productoProducido {get; set;}

    public IEnumerable<Productos> L_Productos {get; set;} = Enumerable.Empty<Productos>();

    public int cantidadUtilizada {get; set;}

    public int cantidadProducida {get; set;} = 0;

    public string ValidacionD {get; set;} = string.Empty;

    public Productos producto {get; set;} = new Productos();

    public int suma {get; set;} = 0;

    public List<Productos> productos {get; set;} = new List<Productos>();

    public EntradasDetalle entradasDetalle {get; set;} = new EntradasDetalle();

    public NotificationMessage Mensaje {get; set;} = new NotificationMessage();

    public int ConteoDetalles {get; set;}

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();

        if(EntradaId > 0)
        {
            this.entradas.EntradaId = EntradaId;
            await Buscar();
        }
    }

    private async Task CargarProductos()
    {
        var productoEncontrado = await httpClient.GetFromJsonAsync<IEnumerable<Productos>>("api/Productos");

        if(productoEncontrado != null)
        {
            L_Productos = productoEncontrado;
        }
    }

    public async Task Buscar()
    {
        if (Validar())
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error, Id o Fecha incorrecto/s",
                    Detail = "Revise si ha insertado correctamente el Id y/o la fecha",
                    Duration = 4_000
                };
            notificationService.Notify(Mensaje);
            return;
        }

        var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{EntradaId}");

        suma = 0;
        entradas.PesoTotal = 0;

        if(entradaEncontrada is not null)
        {
            this.entradas = entradaEncontrada;
            StateHasChanged();

            suma = 0;
            entradas.PesoTotal =0;
            foreach (var entradaD in entradas.EntradasDetalle)
            {
                suma += entradaD.CantidadUtilizada;
                entradas.PesoTotal = suma;
            }
            ConteoDetalles = entradas.EntradasDetalle != null ? entradas.EntradasDetalle.Count() : 0;

        }
        else if(this.entradas == null)
        {
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al encontrar la entrada",
                Detail = "No se han encontrado Entradas",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
        }
    }

    public void Nuevo()
    {
        this.entradas = new Entradas();
        ValidacionD = string.Empty;

        productoSeleccionado = 0;
        cantidadUtilizada =0;
    }

    public async Task Guardar()
    {
        if(entradas.PesoTotal != 0)
        {
            if(ValidarPesoMenor())
            {
                Mensaje = new NotificationMessage 
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "La opcion insertada es incorrecta o el peso es menor a 90 gramos",
                    Duration = 4_000
                };
                notificationService.Notify(Mensaje);
                return;
            }

            if (ValidarPesoMediaLibra())
            {
                Mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error al guardar",
                        Detail = "El peso debe de ser mayor a 225 gramos, debido a que el paquete no cumpliria con el peso correcto (ESTAFADOR)",
                        Duration = 4_000
                    };
                notificationService.Notify(Mensaje);
                return;
            }

        }

        if(Validar())
        {
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al guardar",
                Detail = "El ID o la Fecha son incorrectos",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
            return;
        }

        if (ValidarCasillasVacias())
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Le falta ingresar uno o mas datos",
                    Duration = 4_000
                };
            notificationService.Notify(Mensaje);
            return;
        }

        /*if(ValidarProducido())
        {
            Mensaje = new NotificationMessage
            {
            Severity = NotificationSeverity.Error,
            Summary = "Error al guardar",
            Detail = "Debe de insertar los productos requeridos y la cantidad producidad",
        Duration = 4_000
        };
        notificationService.Notify(Mensaje);
        return;
    }*/

        try{
            using var response = await httpClient.PostAsJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaId}", entradas);

            if(!response.IsSuccessStatusCode)
            {
                if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    Mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error, producto no encontrado",
                            Detail = "Hay uno o varios productos que no tenemos actualmente",
                            Duration = 5_000
                        };
                    notificationService.Notify(Mensaje);
                    return;
                }

                if (response.StatusCode == HttpStatusCode.BadRequest && entradas.ProductoId == 0 || entradas.CantidadProducida <= 0 || producto.ProductoId == 0)
                {
                    Mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error, debe de llenar detalles",
                            Detail = $"Debe de rellenar todos los campos",
                            Duration = 5_000
                        };
                    notificationService.Notify(Mensaje);
                    return;
                }

                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    Mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error en la cantidad de productos",
                            Detail = $"Ha insertado {entradas.EntradasDetalle.Count()} productos debe de insertar obligatoriamente 3 productos",
                            Duration = 5_000
                        };
                    notificationService.Notify(Mensaje);
                    return;
                }
            }
            else
            {
                var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();

                if(entradaDevuelta is not null)
                {
                    entradas = entradaDevuelta;
                    StateHasChanged();
                    Nuevo();

                    entradas.CantidadProducida = cantidadProducida;


                    Mensaje = new NotificationMessage 
                        {
                        Severity = NotificationSeverity.Success,
                        Summary = "Exito al guardar",
                        Detail = "Ha guardado la entrada correctamente",
                        Duration = 4_000
                };
                    notificationService.Notify(Mensaje); 


                    /*if(ValidarPesoInsertadoMenor())
                    {
                    Mensaje = new NotificationMessage 
                    {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito al guardar",
                    Detail = "Ha guardado un mixto de 0.2 libras",
                    Duration = 4_000
                    };
                    notificationService.Notify(Mensaje);
                return;
                    }

                else if(ValidarPesoInsertadoMayor())
                {
                Mensaje = new NotificationMessage 
                    {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito al guardar",
                    Detail = "Ha guardadod un mixto de 0.5 libras",
                    Duration = 4_000
                    };
                    notificationService.Notify(Mensaje); 
                }*/
                }
            }

        }catch(Exception e)
        {
            Console.WriteLine($"Error en la solicitud POST: {e}");
        }
    }

    public void AgregarDetalle()
    {
        suma = 0;
        entradas.PesoTotal = 0;
        if(!ValidarDetalle())
        {
            return;
        }

        entradas.EntradasDetalle.Add(new EntradasDetalle()
        {
            ProductoId = productoSeleccionado,
            CantidadUtilizada = cantidadUtilizada,
        });
        entradas.CantidadProducida = cantidadProducida;

        productoSeleccionado = 0;
        cantidadUtilizada = 0;

        foreach (var entradaD in entradas.EntradasDetalle)
        {
            suma += entradaD.CantidadUtilizada;
            entradas.PesoTotal = suma;
        }
        ConteoDetalles = entradas.EntradasDetalle != null ? entradas.EntradasDetalle.Count() : 0;
    }

    public string DescripcionProducto(int productoId)
    {
        var descripcion = L_Productos.FirstOrDefault(p => p.ProductoId == productoId);

        return descripcion!.Descripcion;
    }

    public async Task RemoverDetalle(EntradasDetalle detalleRemover)
    {
        if(detalleRemover.DetalleId > 0)
        {
            using var response = await httpClient.DeleteAsync($"api/Entradas/EliminarDetalle/{detalleRemover.DetalleId}");

            if(!response.IsSuccessStatusCode)
            {
                return;
            }
            else
            {
                productoSeleccionado = detalleRemover.ProductoId;
                cantidadUtilizada = detalleRemover.CantidadUtilizada;

                entradas.EntradasDetalle.Remove(detalleRemover);

                foreach (var entradaD in entradas.EntradasDetalle)
                {
                    suma -= entradaD.CantidadUtilizada;
                    suma = entradaD.CantidadUtilizada;
                    entradas.PesoTotal = suma;
                }
                Mensaje = new NotificationMessage 
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito al eliminar el detalle",
                    Detail = "Se ha eliminado correctamente el detalle",
                    Duration = 4_000
                };
                notificationService.Notify(Mensaje);

                entradas.PesoTotal = entradas.EntradasDetalle.Sum(e => e.CantidadUtilizada);
                return;
            }
        }
        else if(detalleRemover.DetalleId == 0)
        {
            productoSeleccionado = detalleRemover.ProductoId;
            cantidadUtilizada = detalleRemover.CantidadUtilizada;
            entradas.EntradasDetalle.Remove(detalleRemover);

            suma -= cantidadUtilizada;
            //suma = entradas.PesoTotal;
            entradas.PesoTotal = suma;


            ConteoDetalles = entradas.EntradasDetalle != null ? entradas.EntradasDetalle.Count() : 0;
        }
    }

    public bool ValidarDetalle()
    {
        ValidacionD = string.Empty;

        if(productoSeleccionado <= 0)
        {
            ValidacionD = "El producto es obligatorio";
        }

        if(cantidadUtilizada <= 0)
        {
            ValidacionD = "La cantidad utilizada es obligatoria";
        }


        return ValidacionD.Length == 0;
    }

    public async Task Eliminar()
    {

        if(ValidarCasillasVacias())
        {
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Info,
                Summary = "Casillas Vacias",
                Detail = "No se puede eliminar, debido a que no nada que eliminar",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
            return;
        }

        using var response = await httpClient.DeleteAsync($"api/Entradas/{entradas.EntradaId}");

        if(!response.IsSuccessStatusCode)
        {
            return;
        }
        else
        {
            Nuevo();
            Mensaje = new NotificationMessage 
            {
                Severity = NotificationSeverity.Success,
                Summary = "Exito al eliminar la entrada",
                Detail = "Se ha eliminado correctamente la entrada",
                Duration = 4_000
            };
            notificationService.Notify(Mensaje);
            return;
        }
    }


    public bool ValidarCasillasVacias()
    {
        return string.IsNullOrEmpty(entradas.Concepto)  &&
                entradas.EntradasDetalle.Count() <= 0;
    }

    public bool Validar()
    {
        return EntradaId < 0 ||
                entradas.Fecha > DateTime.Now;
    }

    public bool ValidarPesoMenor()
    {
        return entradas.PesoTotal < 90;
        //entradas.ProductoId == 5 ||
                //entradas.ProductoId == 6;
    }

    public bool ValidarPesoMediaLibra()
    {
        return entradas.PesoTotal < 226 &&
                entradas.PesoTotal > 250;
        //entradas.ProductoId != 7;
    }

    public bool ValidarPesoInsertadoMenor()
    {
        return entradas.PesoTotal >= 90 &&
                entradas.PesoTotal < 110;
    }

    public bool ValidarPesoInsertadoMayor()
    {
        return entradas.PesoTotal >= 226 &&
                entradas.PesoTotal < 250; 
    }

    public bool ValidarProducido()
    {
        ValidacionD = string.Empty;

        if(entradas.ProductoId <= 0)
        {
            ValidacionD = "El producto producido es obligatorio";
        }

        if(entradas.CantidadProducida <= 0)
        {
            ValidacionD = "La cantidad producida es obligatoria";
        }

        return ValidacionD.Length == 0;
    }
}